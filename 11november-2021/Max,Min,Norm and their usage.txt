As we already know java being completely object-oriented works within a multithreading environment in which thread scheduler assigns the processor to a thread based on the priority of thread. 
Whenever we create a thread in Java, it always has some priority assigned to it. 
Priority can either be given by JVM while creating the thread or it can be given by the programmer explicitly. 
Priorities in threads is a concept where each thread is having a priority which in laymanâ€™s language one can say every object is having priority here which is represented by numbers ranging from 1 to 10. 

The default priority is set to 5 as excepted.
Minimum priority is set to 1.
Maximum priority is set to 10.
Here 3 constants are defined in it namely as follows:

public static int NORM_PRIORITY
public static int MIN_PRIORITY
public static int MAX_PRIORITY

import java.lang.*;

class ThreadDemo extends Thread {

	
	public void run()
	{
		System.out.println("Inside run method");
	}

	
	public static void main(String[] args)
	{
		
		ThreadDemo t1 = new ThreadDemo();
		ThreadDemo t2 = new ThreadDemo();
		ThreadDemo t3 = new ThreadDemo();

		
		System.out.println("t1 thread priority : "
						+ t1.getPriority());

		
		System.out.println("t2 thread priority : "
						+ t2.getPriority());

		
		System.out.println("t3 thread priority : "
						+ t3.getPriority());

		
		t1.setPriority(2);
		t2.setPriority(5);
		t3.setPriority(8);

		

		
		System.out.println("t1 thread priority : "
						+ t1.getPriority());

		
		System.out.println("t2 thread priority : "
						+ t2.getPriority());

		
		System.out.println("t3 thread priority : "
						+ t3.getPriority());

		
		System.out.println(
			"Currently Executing Thread : "
			+ Thread.currentThread().getName());

		System.out.println(
			"Main thread priority : "
			+ Thread.currentThread().getPriority());

		
		Thread.currentThread().setPriority(10);

		System.out.println(
			"Main thread priority : "
			+ Thread.currentThread().getPriority());
	}
}
